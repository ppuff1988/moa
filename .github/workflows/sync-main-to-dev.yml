name: Sync Main to Dev

on:
  workflow_run:
    workflows: ['Auto Version Bump']
    types: [completed]
  workflow_dispatch:

jobs:
  create-pr:
    name: 建立 main → dev 同步 PR
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    permissions:
      contents: read
      pull-requests: write
      issues: write
    steps:
      - name: 建立 PR（main → dev）
        id: open_pr
        uses: actions/github-script@v7
        with:
          script: |
            // 從 main 的 package.json 讀取版本
            const { data: pkg } = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'package.json',
              ref: 'main'
            });
            const content = Buffer.from(pkg.content, 'base64').toString('utf8');
            const version = JSON.parse(content).version;
            core.setOutput('version', version);

            // 若已有同樣的開啟 PR，則略過但輸出 PR 資訊
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              base: 'dev',
              head: `${context.repo.owner}:main`
            });

            if (prs.length > 0) {
              console.log(`ℹ️ 已存在同步 PR #${prs[0].number}: ${prs[0].html_url}`);
              core.setOutput('result', 'exists');
              core.setOutput('pr_number', String(prs[0].number));
              core.setOutput('pr_url', prs[0].html_url);
              return;
            }

            const title = `chore(release): sync main to dev v${version}`;
            const body = [
              '🚀 自動將 main 的版本變更同步到 dev',
              '',
              `- 新版本: v${version}`,
              `- 來源: main → dev`,
              '',
              '此 PR 將在 CI 通過後由 Auto Merge to Dev workflow 以 Rebase 模式自動合併（符合 Require linear history）'
            ].join('\n');

            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              head: 'main',
              base: 'dev',
              body
            });

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: ['auto-sync', 'release']
            });

            console.log(`✅ 已建立同步 PR #${pr.number}: ${pr.html_url}`);
            core.setOutput('result', 'created');
            core.setOutput('pr_number', String(pr.number));
            core.setOutput('pr_url', pr.html_url);

            // 可選：嘗試啟用 GitHub Auto-merge（Rebase）。若倉庫未開啟，會被 try/catch 吃掉。
            try {
              await github.graphql(`
                mutation($pullRequestId: ID!, $mergeMethod: PullRequestMergeMethod!) {
                  enablePullRequestAutoMerge(input: {
                    pullRequestId: $pullRequestId,
                    mergeMethod: $mergeMethod
                  }) {
                    pullRequest { number }
                  }
                }
              `, {
                pullRequestId: pr.node_id,
                mergeMethod: 'REBASE'
              });
              console.log('🤖 已嘗試啟用 GitHub Auto-merge（Rebase）');
            } catch (e) {
              console.log(`ℹ️ 無法啟用 GitHub Auto-merge（可能未啟用），將交由 Auto Merge to Dev 處理：${e.message}`);
            }

  notify:
    name: TG 通知 - Sync Main→Dev
    runs-on: ubuntu-latest
    needs: create-pr
    if: always()
    steps:
      - name: 彙整通知內容
        id: compose
        uses: actions/github-script@v7
        with:
          script: |
            // 讀取版本
            const { data: pkg } = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'package.json',
              ref: 'main'
            });
            const content = Buffer.from(pkg.content, 'base64').toString('utf8');
            const version = JSON.parse(content).version;

            // 查找現有 main→dev PR
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              base: 'dev',
              head: `${context.repo.owner}:main`
            });
            const pr = prs[0];

            const statusLine = (pr
              ? `*PR:* ${pr.html_url}`
              : '＊PR：目前沒有開啟的同步 PR');

            const body = [
              `${process.env.RESULT === 'success' ? '🔄 *Sync Main → Dev 完成*' : '❌ *Sync Main → Dev 失敗*'}`,
              '',
              `*專案:* ${context.repo.owner}/${context.repo.repo}`,
              `*版本:* v${version}`,
              `*觸發:* ${context.payload.action || context.eventName}`,
              statusLine
            ].join('\n');

            core.setOutput('text', body);
        env:
          RESULT: ${{ needs.create-pr.result }}
      - name: 發送 Telegram 通知
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          message: ${{ steps.compose.outputs.text }}
