name: Sync Main to Dev

on:
  workflow_run:
    workflows: ['Auto Version Bump']
    types: [completed]
  workflow_dispatch:

jobs:
  create-pr:
    name: 建立 main → dev 同步 PR
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - name: 建立 PR（main → dev）
        id: open_pr
        uses: actions/github-script@v7
        with:
          script: |
            console.log('🔍 開始檢查 main → dev 同步狀態...');
            console.log('');

            // 從 main 的 package.json 讀取版本
            const { data: pkg } = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'package.json',
              ref: 'main'
            });
            const content = Buffer.from(pkg.content, 'base64').toString('utf8');
            const version = JSON.parse(content).version;
            core.setOutput('version', version);

            console.log(`📦 Main 分支版本: v${version}`);
            console.log('');

            // 檢查 main 和 dev 的 commit 差異
            try {
              const { data: comparison } = await github.rest.repos.compareCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                base: 'dev',
                head: 'main'
              });
              
              console.log(`📊 Main 領先 Dev ${comparison.ahead_by} 個 commits`);
              console.log(`📊 Dev 領先 Main ${comparison.behind_by} 個 commits`);
              
              if (comparison.ahead_by === 0) {
                console.log('');
                console.log('✅ Dev 分支已經是最新的，無需建立同步 PR');
                core.setOutput('result', 'up-to-date');
                return;
              }
              
              console.log('');
              console.log('📝 需要同步的變更：');
              comparison.commits.slice(0, 5).forEach(commit => {
                console.log(`   - ${commit.sha.slice(0, 7)}: ${commit.commit.message.split('\n')[0]}`);
              });
              if (comparison.commits.length > 5) {
                console.log(`   ... 還有 ${comparison.commits.length - 5} 個 commits`);
              }
              console.log('');
            } catch (error) {
              console.log(`⚠️ 無法比較分支: ${error.message}`);
              console.log('繼續檢查是否需要建立 PR...');
              console.log('');
            }

            // 檢查是否已有開啟的 main → dev PR
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              base: 'dev',
              head: `${context.repo.owner}:main`
            });

            if (prs.length > 0) {
              console.log(`ℹ️ 已存在同步 PR #${prs[0].number}: ${prs[0].html_url}`);
              console.log(`   狀態: ${prs[0].state}`);
              console.log(`   標題: ${prs[0].title}`);
              core.setOutput('result', 'exists');
              core.setOutput('pr_number', String(prs[0].number));
              core.setOutput('pr_url', prs[0].html_url);
              return;
            }

            console.log('📌 沒有開啟的同步 PR，準備建立新的...');
            console.log('');

            const title = `chore(release): sync main to dev v${version}`;
            const body = [
              '🚀 自動將 main 的版本變更同步到 dev',
              '',
              `- 新版本: v${version}`,
              `- 來源: main → dev`,
              '',
              '此 PR 將在 CI 通過後由 Auto Merge to Dev workflow 以 Rebase 模式自動合併（符合 Require linear history）'
            ].join('\n');

            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              head: 'main',
              base: 'dev',
              body
            });

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: ['auto-sync', 'release']
            });

            console.log(`✅ 已建立同步 PR #${pr.number}: ${pr.html_url}`);
            core.setOutput('result', 'created');
            core.setOutput('pr_number', String(pr.number));
            core.setOutput('pr_url', pr.html_url);

            // 嘗試啟用 GitHub Auto-merge（需要分支保護規則）
            console.log('');
            console.log('🔍 嘗試啟用 GitHub 內建 Auto-merge...');
            try {
              await github.graphql(`
                mutation($pullRequestId: ID!, $mergeMethod: PullRequestMergeMethod!) {
                  enablePullRequestAutoMerge(input: {
                    pullRequestId: $pullRequestId,
                    mergeMethod: $mergeMethod
                  }) {
                    pullRequest { number }
                  }
                }
              `, {
                pullRequestId: pr.node_id,
                mergeMethod: 'REBASE'
              });
              console.log('✅ GitHub Auto-merge 已啟用（Rebase 模式）');
              console.log('ℹ️ PR 將在所有檢查通過後自動合併');
            } catch (e) {
              console.log('⚠️ 無法啟用 GitHub Auto-merge');
              console.log(`   原因: ${e.message}`);
              console.log('');
              console.log('💡 要啟用 GitHub Auto-merge，需要：');
              console.log('   1. Settings → General → Pull Requests');
              console.log('      ☑ Allow auto-merge');
              console.log('');
              console.log('   2. Settings → Branches → Branch protection rule (dev)');
              console.log('      ☑ Require status checks to pass before merging');
              console.log('      ☑ 選擇必要的檢查項目（如：lint, test-api）');
              console.log('');
              console.log('✅ 不過沒關係！Auto Merge to Dev 工作流程會在 CI 通過後自動處理');
            }
  notify:
    name: TG 通知 - Sync Main→Dev
    runs-on: ubuntu-latest
    needs: create-pr
    if: always()
    steps:
      - name: 彙整通知內容
        id: compose
        uses: actions/github-script@v7
        with:
          script: |
            // 讀取版本
            const { data: pkg } = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'package.json',
              ref: 'main'
            });
            const content = Buffer.from(pkg.content, 'base64').toString('utf8');
            const version = JSON.parse(content).version;

            // 查找現有 main→dev PR
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              base: 'dev',
              head: `${context.repo.owner}:main`
            });
            const pr = prs[0];

            const statusLine = (pr
              ? `*PR:* ${pr.html_url}`
              : '＊PR：目前沒有開啟的同步 PR');

            const body = [
              `${process.env.RESULT === 'success' ? '🔄 *Sync Main → Dev 完成*' : '❌ *Sync Main → Dev 失敗*'}`,
              '',
              `*專案:* ${context.repo.owner}/${context.repo.repo}`,
              `*版本:* v${version}`,
              `*觸發:* ${context.payload.action || context.eventName}`,
              statusLine
            ].join('\n');

            core.setOutput('text', body);
        env:
          RESULT: ${{ needs.create-pr.result }}
      - name: 發送 Telegram 通知
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          message: ${{ steps.compose.outputs.text }}
